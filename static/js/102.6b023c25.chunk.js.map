{"version":3,"file":"static/js/102.6b023c25.chunk.js","mappings":"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","sources":["components/Loader/Loader.styled.js","components/Loader/Loader.js","components/MovieList/MovieList.styled.js","components/MovieList/MovieList.js","components/Notification/Notification.js","pages/Movies/Movies.styled.js","pages/Movies/Movies.js","services/API.js"],"sourcesContent":["const { default: styled } = require('@emotion/styled');\n\nconst Spinner = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport { Spinner };\n","import React from 'react';\n\nimport GridLoader from 'react-spinners/GridLoader';\n\nimport { Spinner } from './Loader.styled';\n\nconst Loader = () => {\n  return (\n    <Spinner>\n      <GridLoader color=\"#0000a0\" aria-label=\"Loading Spinner\" size={50} />\n    </Spinner>\n  );\n};\n\nexport { Loader };\n","import { NavLink } from 'react-router-dom';\nimport styled from '@emotion/styled';\n\nconst List = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  gap: 40px;\n`;\n\nconst ListItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  flex-basis: calc((100% - 3 * 40px) / 4);\n  box-shadow: 0 8px 8px #0000a0;\n  border-radius: 5px;\n`;\n\nconst Item = styled(NavLink)`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  height: 500px;\n`;\n\nconst Poster = styled.img`\n  margin-top: 20px;\n  height: 365px;\n  width: 90%;\n  border-radius: 5px;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover:not(.active),\n  &:focus-visible:not(.active) {\n    transform: scale(1.1);\n  }\n`;\n\nconst Info = styled.div`\n  padding: 30px 20px;\n`;\n\nexport { List, ListItem, Item, Poster, Info };\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\n\nimport { List, ListItem, Item, Poster, Info } from './MovieList.styled';\n\nimport defaultPicture from '../../images/no-poster.jpg';\n\nexport const MovieList = ({ items }) => {\n  const location = useLocation();\n\n  return (\n    <List>\n      {items.map(({ id, poster_path, title }) => (\n        <ListItem key={id}>\n          <Item to={`/movies/${id}`} state={{ from: location }}>\n            <Poster\n              src={\n                poster_path\n                  ? `https://image.tmdb.org/t/p/w500${poster_path}`\n                  : defaultPicture\n              }\n              alt={title}\n            />\n            <Info>\n              <p>{title}</p>\n            </Info>\n          </Item>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nMovieList.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      poster_path: PropTypes.string,\n      title: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import PropTypes from 'prop-types';\nimport styled from '@emotion/styled';\n\nexport const Notification = ({ message }) => {\n  return <Message>{message}</Message>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nconst Message = styled.p`\n  color: #ff0000;\n  font-weight: 700;\n`;\n","import styled from '@emotion/styled';\n\nconst Section = styled.section`\n  padding-top: 36px;\n  padding-bottom: 36px;\n  text-align: center;\n`;\n\nconst Container = styled.div`\n  padding-left: 20px;\n  padding-right: 20px;\n  margin-left: auto;\n  margin-right: auto;\n  width: 1280px;\n`;\n\nconst Form = styled.form`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  gap: 24px;\n  margin: 0 auto;\n  margin-bottom: 36px;\n  width: 510px;\n  border-radius: 4px;\n`;\nconst Field = styled.div`\n  position: relative;\n`;\n\nconst Label = styled.label`\n  position: absolute;\n  top: 50%;\n  left: 16px;\n  transform: translateY(-50%);\n  padding: 0 4px;\n  font-size: 16px;\n   color: #0000a0;\n  pointer-events: none;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    background-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  Input:focus ~ &,\n  Input:not(:placeholder-shown) ~ & {\n        transform: translateY(-50px) scale(0.9);\n    color: #0000a0;\n      }\n\n  Input:not(:focus) ~ & {\n    color: #0000a0;\n  }\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  height: 50px;\n  padding: 8px 16px;\n  padding-right: 42px;\n  font-size: 16px;\n  letter-spacing: 1.4px;\n  color: #0000a0;\n  background-color: transparent;\n  border: 1px solid #0000a0;\n  border-radius: 10px;\n  outline: none;\n  transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:focus {\n    border-color: #0000a0;\n       box-shadow: 0 8px 8px #0000a0;\n  }\n\n  &:not(:focus) {\n    color: #0000a0;\n  }\n`;\n\nconst Button = styled.button`\n  position: absolute;\n    top: 30%;\n  right: 16px;\n    padding: 0;\n  color: #0000a0;\n  background-color: transparent;\n  border: none;\n  cursor: pointer;\n  transition: color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  &:focus {\n    color: #5218fa;\n  }\n\n  animation: button 3000ms infinite;\n\n  @keyframes button {\n    0% {\n      transform: scale(1.5);\n    }\n    50% {\n      transform: scale(1);\n    }\n    100% {\n      transform: scale(1.5);\n    }\n  }\n`;\n\nexport { Section, Container, Form, Field, Label, Input, Button };\n","import { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nimport toast, { Toaster } from 'react-hot-toast';\n\nimport { ImSearch } from 'react-icons/im';\nimport { BsEmojiFrown } from 'react-icons/bs';\n\nimport { getMovieByQuery } from 'services/API';\n\nimport { MovieList } from 'components/MovieList';\nimport { Notification } from 'components/Notification';\nimport { Loader } from 'components/Loader';\n\nimport {\n  Section,\n  Container,\n  Form,\n  Field,\n  Label,\n  Input,\n  Button,\n} from './Movies.styled';\n\nconst Status = {\n  IDLE: 'idle',\n  PENDING: 'pending',\n  REJECTED: 'rejected',\n  RESOLVED: 'resolved',\n};\n\nconst Movies = () => {\n  const [query, setQuery] = useState('');\n  const [movies, setMovies] = useState([]);\n  const [error, setError] = useState(null);\n  const [status, setStatus] = useState(Status.IDLE);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const queryParam = searchParams.get('query');\n\n  useEffect(() => {\n    if (!queryParam) {\n      return;\n    }\n    setStatus(Status.PENDING);\n    getMovieByQuery(queryParam)\n      .then(({ results }) => {\n        if (!results.length) {\n          setError(`No result containing ${queryParam} were found.`);\n          setStatus(Status.REJECTED);\n          return;\n        }\n        setMovies(results);\n        setStatus(Status.RESOLVED);\n      })\n      .catch(error => {\n        setError(error);\n        setStatus(Status.REJECTED);\n      });\n  }, [queryParam]);\n\n  const handleChange = e => {\n    const { value } = e.currentTarget;\n    setQuery(value);\n  };\n\n  const submitHandler = e => {\n    e.preventDefault();\n\n    const searchQuery = query.trim().toLowerCase();\n\n    if (!searchQuery) {\n      toast.error('Search box cannot be empty. Please enter the word.', {\n        icon: <BsEmojiFrown size={36} outline=\"#0000a0\" />,\n             });\n      return;\n    }\n    setSearchParams({ query: searchQuery });\n    \n    setQuery('');\n  };\n\n  return (\n    <main>\n      <Toaster position=\"top-center\" reverseOrder={false} />\n      <Section>\n        <Container>\n          <Form onSubmit={submitHandler}>\n            <Field>\n              <Input\n                type=\"text\"\n                name=\"query\"\n                value={query}\n                autoComplete=\"off\"\n                placeholder=\" \"\n                onChange={handleChange}\n              />\n              <Label>Search movies</Label>\n            </Field>\n            <Button type=\"submit\">\n              <ImSearch size={24} outline=\"#0000a0\" />\n            </Button>\n          </Form>\n          {status === Status.PENDING && <Loader />}\n          {status === Status.REJECTED && <Notification message={error} />}\n          {status === Status.RESOLVED && <MovieList items={movies} />}\n        </Container>\n      </Section>\n    </main>\n  );\n};\n\nexport default Movies;\n","const BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '559cbcab39764ce535027da10f396384';\n\nasync function getTrendingMovies() {\n  const response = await fetch(\n    `${BASE_URL}/trending/movie/day?api_key=${API_KEY}`\n  );\n  if (response.ok) {\n    return await response.json();\n  }\n  return await Promise.reject(\n    new Error(\"Oops, something went wrong... We can't load trending movies :(\")\n  );\n}\n\nasync function getMovieById(id) {\n  const response = await fetch(`${BASE_URL}/movie/${id}?api_key=${API_KEY}`);\n  if (response.ok) {\n    return await response.json();\n  }\n  return await Promise.reject(\n    new Error(\n      'We are sorry, but we did not find any information about movie :('\n    )\n  );\n}\n\nasync function getMovieCast(id) {\n  const response = await fetch(\n    `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`\n  );\n  if (response.ok) {\n    return await response.json();\n  }\n  return await Promise.reject(\n    new Error('We are sorry, but we did not find any information about cast :(')\n  );\n}\n\nasync function getMovieReviews(id) {\n  const response = await fetch(\n    `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`\n  );\n  if (response.ok) {\n    return await response.json();\n  }\n  return await Promise.reject(\n    new Error('We do not have any reviews for this movie :(')\n  );\n}\n\nasync function getMovieByQuery(query) {\n  const response = await fetch(\n    `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`\n  );\n  if (response.ok) {\n    return await response.json();\n  }\n  return await Promise.reject(\n    new Error(`No results containing ${query} were found.`)\n  );\n}\n\nexport {\n  getTrendingMovies,\n  getMovieById,\n  getMovieCast,\n  getMovieReviews,\n  getMovieByQuery,\n};\n"],"names":["Spinner","require","default","div","Loader","color","size","List","styled","ListItem","Item","NavLink","Poster","Info","MovieList","items","location","useLocation","map","id","poster_path","title","to","state","from","src","defaultPicture","alt","Notification","message","Message","Section","Container","Form","Field","Label","Input","Button","Status","useState","query","setQuery","movies","setMovies","error","setError","status","setStatus","useSearchParams","searchParams","setSearchParams","queryParam","get","useEffect","getMovieByQuery","then","results","length","catch","position","reverseOrder","onSubmit","e","preventDefault","searchQuery","trim","toLowerCase","toast","icon","outline","type","name","value","autoComplete","placeholder","onChange","currentTarget","BASE_URL","API_KEY","getTrendingMovies","fetch","response","ok","json","Promise","reject","Error","getMovieById","getMovieCast","getMovieReviews"],"sourceRoot":""}