{"version":3,"file":"static/js/762.7778f2b2.chunk.js","mappings":"8PAEaA,EAAOC,EAAAA,QAAAA,GAAH,4LAUJC,EAAYD,EAAAA,QAAAA,EAAH,8CAITE,EAAOF,EAAAA,QAAAA,EAAH,2GAOJG,EAAQH,EAAAA,QAAAA,IAAH,uG,mBClBH,SAASI,EAAT,GAAsD,IAAlCC,EAAiC,EAAjCA,KAAMC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,UAC/CC,EAAQF,EAAY,0CACaA,GACnCG,EAEJ,OACE,UAACV,EAAD,YACE,SAACI,EAAD,CAAOO,IAAKF,EAAOG,IAAI,MACvB,SAACT,EAAD,UAAOG,KACP,UAACJ,EAAD,yBAAuBM,OAG5B,CCfM,IAAMK,EAAOZ,EAAAA,QAAAA,GAAH,wKAUJa,EAASb,EAAAA,QAAAA,EAAH,8D,UCDJ,SAASc,IACtB,OAAkCC,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,EAAoBC,OAAOH,GAiCjC,OA/BAI,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GACJ,IAAMC,EAAQD,EAASE,KAAKC,KACtBC,EAAUH,EAAMI,KAAI,SAAAF,GAAI,OAAIA,EAAKG,EAAT,IACxBC,EAAUC,MAAMC,KAAK,IAAIC,IAAIN,IAC/BO,EAAU,GACdJ,EAAQK,SAAQ,SAAAC,GACdF,EAAQG,KAAKb,EAAMc,MAAK,SAAAZ,GAAI,OAAIA,EAAKG,KAAOO,CAAhB,IAC7B,IAEDrB,EAAamB,EACd,IACAK,OAAM,SAAUC,GACXA,EAAMjB,SACRkB,EAAAA,GAAAA,MAAYD,EAAMjB,SAASE,KAAM,CAC/BiB,SAAU,MAEHF,EAAMG,QACfF,EAAAA,GAAAA,MAAY,wBAAyB,CACnCC,SAAU,MAGZD,EAAAA,GAAAA,MAAsBD,EAAMI,QAAU,CACpCF,SAAU,KAGf,IACAG,SACJ,GAAE,CAAC3B,KAGF,8BACwB,IAArBJ,EAAUgC,QACT,SAACpC,EAAD,UACGI,EAAUc,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAI1B,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,aAAcC,EAAgB,EAAhBA,UACxC,OACE,SAACH,EAAD,CAEEC,KAAMA,EACNC,aAAcA,EACdC,UAAWA,GAHNwB,EAMV,OAGH,SAAClB,EAAD,iEAIP,C,mMCjEDoC,EAAAA,EAAAA,SAAAA,QAAyB,gCACzB,IAAMC,EAAU,mCAET,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,iFACQH,EAAAA,EAAAA,IAAA,+BACaC,EADb,kBAC8BE,IAFtC,0GAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA+BnC,GAA/B,iFACQ+B,EAAAA,EAAAA,IAAA,iBAAoB/B,EAApB,oBAAuCgC,IAD/C,0GAIA,SAAe3B,EAAtB,+CAAO,OAAP,oBAAO,WAA+BL,GAA/B,iFACQ+B,EAAAA,EAAAA,IAAA,iBAAoB/B,EAApB,4BAA+CgC,IADvD,0GAIA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA+BpC,GAA/B,iFACQ+B,EAAAA,EAAAA,IAAA,iBAAoB/B,EAApB,4BAA+CgC,IADvD,0GAIA,IAAMK,EAAiB,mCAAG,WAAMC,GAAN,uFACZP,EAAAA,EAAAA,IAAA,0BACEO,EADF,oBACkBN,EADlB,wCADY,cACzBO,EADyB,yBAKxBA,EAAK9B,MALmB,2CAAH,qD","sources":["components/CastItem/CastItem.styled.jsx","components/CastItem/CastItem.jsx","components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx","services/API.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Item = styled.li`\n  width: 150px;\n  height: 270px;\n  text-align: center;\n  padding: 2px;\n  border-radius: 5px;\n  /* background-color: #c2baba; */\n  background-color: #3f51b5;\n`;\n\nexport const Character = styled.p`\n  font-size: 14px;\n  `;\n\nexport const Name = styled.p`\n  font-size: 14px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  color: #141b45;\n`;\n\nexport const Photo = styled.img`\n  width: 150px;\n  height: 75%;\n  margin-bottom: 10px;\n  object-fit: cover;\n`;\n","import { Item, Character, Name, Photo } from './CastItem.styled';\nimport PropTypes from 'prop-types';\n\nimport defaultImage from '../../images/no-image.png';\n\nexport default function CastItem({ name, profile_path, character }) {\n  const photo = profile_path\n    ? `https://image.tmdb.org/t/p/w500/${profile_path}`\n    : defaultImage;\n\n  return (\n    <Item>\n      <Photo src={photo} alt=\"\" />\n      <Name>{name}</Name>\n      <Character>Character: {character}</Character>\n    </Item>\n  );\n}\n\nCastItem.propTypes = {\n  name: PropTypes.string.isRequired,\n  profile_path: PropTypes.string,\n  character: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  display: flex;\n  justify-content: center;\n  flex-wrap: wrap;\n  column-gap: 20px;\n  row-gap: 20px;\n  list-style: none;\n  padding: 10px;\n`;\n\nexport const NoCast = styled.p`\n  padding: 20px;\n  font-size: 16px;\n`;\n","import { useState, useEffect } from 'react';\n\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCredits } from 'services/API';\n\nimport CastItem from 'components/CastItem';\nimport { List, NoCast } from './Cast.styled';\n\nimport { toast } from 'react-toastify';\n\nexport default function Cast() {\n  const [movieCast, setMovieCast] = useState([]);\n  const { movieId } = useParams();\n  const movieIdTypeNumber = Number(movieId);\n\n  useEffect(() => {\n    getMovieCredits(movieIdTypeNumber)\n      .then(response => {\n        const casts = response.data.cast;\n        const castsId = casts.map(cast => cast.id);\n        const castSet = Array.from(new Set(castsId));\n        let newCast = [];\n        castSet.forEach(el => {\n          newCast.push(casts.find(cast => cast.id === el));\n        });\n\n        setMovieCast(newCast);\n      })\n      .catch(function (error) {\n        if (error.response) {\n          toast.error(error.response.data, {\n            duration: 1000,\n          });\n        } else if (error.request) {\n          toast.error('XMLHttpRequest failed', {\n            duration: 1000,\n          });\n        } else {\n          toast.error(('Error', error.message), {\n            duration: 1000,\n          });\n        }\n      })\n      .finally();\n  }, [movieIdTypeNumber]);\n\n  return (\n    <>\n      {movieCast.length !== 0 ? (\n        <List>\n          {movieCast.map(({ id, name, profile_path, character }) => {\n            return (\n              <CastItem\n                key={id}\n                name={name}\n                profile_path={profile_path}\n                character={character}\n              />\n            );\n          })}\n        </List>\n      ) : (\n        <NoCast>There is no information about casts in this movie</NoCast>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '559cbcab39764ce535027da10f396384';\n\nexport async function getSearchMovie(searchQuery) {\n  return await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${searchQuery}`\n  );\n}\n\nexport async function getMovieDetails(movieId) {\n  return await axios.get(`/movie/${movieId}?api_key=${API_KEY}`);\n}\n\nexport async function getMovieCredits(movieId) {\n  return await axios.get(`/movie/${movieId}/credits?api_key=${API_KEY}`);\n}\n\nexport async function getMovieReviews(movieId) {\n  return await axios.get(`/movie/${movieId}/reviews?api_key=${API_KEY}`);\n}\n\nexport const getMoviesTrending = async type => {\n  const resp = await axios.get(\n    `/trending/movie/${type}?api_key=${API_KEY}&language=en-US&include_adult=false`\n  );\n\n  return resp.data;\n};\n"],"names":["Item","styled","Character","Name","Photo","CastItem","name","profile_path","character","photo","defaultImage","src","alt","List","NoCast","Cast","useState","movieCast","setMovieCast","movieId","useParams","movieIdTypeNumber","Number","useEffect","getMovieCredits","then","response","casts","data","cast","castsId","map","id","castSet","Array","from","Set","newCast","forEach","el","push","find","catch","error","toast","duration","request","message","finally","length","axios","API_KEY","getSearchMovie","searchQuery","getMovieDetails","getMovieReviews","getMoviesTrending","type","resp"],"sourceRoot":""}